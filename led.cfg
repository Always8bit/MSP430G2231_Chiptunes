/**
 *  @fileOverview Grace
 */

/* need to use the CSL module to generate the CSL code */
var CSL = xdc.useModule('ti.mcu.msp430.csl.CSL');
var Timer_A2 = xdc.useModule('ti.mcu.msp430.csl.timer.Timer_A2');
CSL.configApiVersion = "1.20.00";

/* these modules should be part of every project */
var BCSplus = xdc.useModule('ti.mcu.msp430.csl.clock.BCSplus');
var WDTplus = xdc.useModule('ti.mcu.msp430.csl.watchdog.WDTplus');
var System = xdc.useModule('ti.mcu.msp430.csl.system.System');
var GPIO = xdc.useModule('ti.mcu.msp430.csl.gpio.GPIO');
var InterruptVectors = xdc.useModule('ti.mcu.msp430.csl.interrupt_vectors.InterruptVectors');

Program.sysStack = 0;
Program.heap = 0;
Program.argSize = 0;
Program.stack = 32;

/* enable interrupts at the end of Grace_init */
System.srRegs.SR.GIE = System.srDefs.GIE;

/* set P1.0 as output so we can drive the launchpad's attached LED */
GPIO.regs.P1DIR.Bit0 = GPIO.defs.BIT0;

/* disable watchdog timer */
WDTplus.regs.WDTCTL.WDTHOLD = WDTplus.defs.WDTHOLD;

CSL.device.vcc = 1.8;
GPIO.regs.P1DIR.Bit6 = GPIO.defs.BIT6;
BCSplus.userInputDCO = 1000.0;
Timer_A2.ccr0TimerSelection_BasicView = xdc.module("ti.mcu.msp430.csl.timer.ITimer").CCR0TimerSelection_BasicView_Selection_3;
Timer_A2.ccr0TimerSelection_PowerUser = xdc.module("ti.mcu.msp430.csl.timer.ITimer").CCR0TimerSelection_PowerUser_Selection_1;
Timer_A2.ccInputPin[0] = 0;
Timer_A2.regs.TACTL.MC = Timer_A2.defs.MC_1;
Timer_A2.regs.TACCR0 = 49999;
Timer_A2.ccrOutputPin[0] = 0;
Timer_A2.regs.TACTL.TASSEL = Timer_A2.defs.TASSEL_2;
Timer_A2.inputClockToTimer = 1000.0;
GPIO.regs.P1DIR.Bit1 = GPIO.defs.BIT1_OFF;
GPIO.regs.P1SEL.Bit1 = GPIO.defs.BIT1_OFF;
GPIO.regs.P1DIR.Bit5 = GPIO.defs.BIT5_OFF;
GPIO.regs.P1SEL.Bit5 = GPIO.defs.BIT5_OFF;
Timer_A2.ccrXTimerSelection_BasicView[1] = xdc.module("ti.mcu.msp430.csl.timer.ITimer").CCRxTimerSelection_BasicView_Selection_2;
Timer_A2.ccrXTimerSelection_PowerUser[1] = xdc.module("ti.mcu.msp430.csl.timer.ITimer").CCRxTimerSelection_PowerUser_Selection_1;
Timer_A2.regs.TACCR1 = 50;
Timer_A2.regs.TACCTL1.OUTMOD = Timer_A2.defs.OUTMOD_7;
Timer_A2.ccrOutputPin[1] = 2;
Timer_A2.regs.interruptSource[1].interruptEnable = false;
Timer_A2.regs.interruptSource[1].interruptHandler = false;
Timer_A2.regs.TACCTL0.CCIE = Timer_A2.defs.CCIE_OFF;
GPIO.regs.P1SEL.Bit6 = GPIO.defs.BIT6;
Timer_A2.regs.TACCTL0.OUT = Timer_A2.defs.OUT_OFF;
Timer_A2.regs.TACCTL1.CAP = Timer_A2.defs.CAP_OFF;
Timer_A2.regs.TACCTL1.SCS = Timer_A2.defs.SCS_OFF;
Timer_A2.inClkPin[0] = 0;
Timer_A2.txClkPin[0] = 0;
